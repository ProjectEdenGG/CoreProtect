import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'com.palantir.git-version' version '0.13.0'
    id 'io.freefair.lombok' version "6.5.0-rc1"
}

group = 'net.coreprotect'
String projectVersion = '22.3.1'
String projectBranch = ''
version = projectVersion // `version` might be modified, we don't always want that (e.g. plugin.yml)
description = 'Provides block protection for your server.'
sourceCompatibility = '17'

repositories {
    jcenter()
    maven { url = 'https://hub.spigotmc.org/nexus/content/groups/public/' }
    maven { url = 'https://papermc.io/repo/repository/maven-public/' }
    maven { url = 'https://repo.codemc.org/repository/maven-public/' }
    maven { url = 'https://maven.enginehub.org/repo/' }
}

dependencies {
    compileOnly('com.sk89q.worldedit:worldedit-bukkit:7.0.0-SNAPSHOT') {
        exclude group: 'org.bukkit'
    }
    compileOnly 'dev.folia:folia-api:1.20.1-R0.1-SNAPSHOT'
    implementation 'org.bstats:bstats-bukkit-lite:1.8'
    implementation 'com.zaxxer:HikariCP:5.0.1'
}

jar {
    archiveClassifier.set("original")
}

artifacts {
    archives shadowJar
}

shadowJar {
    dependencies {
        // #toString because #getGroup technically returns an Object
        relocate('org.bstats', project.group.toString())
        relocate('com.zaxxer', project.group.toString())
        exclude(dependency('com.google.code.gson:.*'))
        exclude(dependency('org.intellij:.*'))
        exclude(dependency('org.jetbrains:.*'))
        exclude(dependency('org.slf4j:.*'))
    }
    archiveClassifier.set(null)
}

ext {
    author = 'Intelli'

    resourceTokens = [
            'project.version': projectVersion,
            'project.branch': projectBranch,
    ]
}

processResources {
    include 'plugin.yml'
    // Whole lotta boilerplate to get the same functionality as Maven here.
    // Replace this if Gradle ever lets us configure the filter before filtering.
    filter(new Transformer<String, String>() {
        @Override
        String transform(String s) {
            ReplaceTokens replaceTokens = new ReplaceTokens(new StringReader(s))
            replaceTokens.setBeginToken('${')
            replaceTokens.setEndToken('}')
            resourceTokens.forEach { key, val ->
                def token = new ReplaceTokens.Token()
                token.setKey(key.toString())
                token.setValue(val.toString())
                replaceTokens.addConfiguredToken(token)
            }
            return replaceTokens.readLines().join('\n')
        }
    })
}

tasks {
    compileJava {
        options.encoding = "UTF-8"
        options.release.set(17)
        options.compilerArgs.add("-parameters")
    }

    javadoc { options.encoding = "UTF-8" }

    processResources {
        filteringCharset = "UTF-8"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            name = "edenReleases"
            url = uri("https://sonatype.projecteden.gg/repository/maven-releases/")
            credentials {
                username "$edenSnapshotsUsername"
                password "$edenSnapshotsPassword"
            }
        }
    }
}